// <auto-generated />
using System;
using MessagingService.Data;
using MessagingService.Entities.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace MessagingService.Data.Migrations
{
    [DbContext(typeof(MessagingDbContext))]
    partial class MessagingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "activity_state", new[] { "chat_in", "offline", "online" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MessagingService.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BackgroundUrl")
                        .HasColumnType("text")
                        .HasColumnName("background_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_chats");

                    b.HasIndex(new[] { "CreatedAt" }, "idx_chats_createdAt")
                        .HasDatabaseName("ix_chats_created_at");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("MessagingService.Entities.ChatParticipant", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<ActivityState>("ActivityState")
                        .HasColumnType("activity_state")
                        .HasColumnName("activity_state");

                    b.HasKey("ChatId", "UserId")
                        .HasName("pk_chat_participants");

                    b.ToTable("chat_participants", (string)null);
                });

            modelBuilder.Entity("MessagingService.Entities.ChatsFace", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("UserId", "Username")
                        .HasName("pk_chats_faces");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_chats_faces_user_id");

                    b.ToTable("chats_faces", (string)null);
                });

            modelBuilder.Entity("MessagingService.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector");

                    b.Property<Guid>("SenderChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_chat_id");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_id");

                    b.Property<string>("SenderUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_user_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_messages_chat_id");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("ix_messages_search_vector")
                        .HasAnnotation("Npgsql:CreatedConcurrently", true);

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "gin");

                    b.HasIndex("SenderChatId", "SenderUserId")
                        .HasDatabaseName("ix_messages_sender_chat_id_sender_user_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("MessagingService.Entities.ChatParticipant", b =>
                {
                    b.HasOne("MessagingService.Entities.Chat", "Chat")
                        .WithMany("Participants")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_participants_chats_chat_id");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("MessagingService.Entities.Message", b =>
                {
                    b.HasOne("MessagingService.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_chats_chat_id");

                    b.HasOne("MessagingService.Entities.ChatParticipant", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderChatId", "SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_chat_participants_sender_chat_id_sender_user_id");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MessagingService.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
