// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StoriesService.Data;

#nullable disable

namespace StoriesService.Data.Migrations
{
    [DbContext(typeof(StoriesDbContext))]
    partial class StoriesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StoriesService.Entities.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean")
                        .HasColumnName("is_edited");

                    b.Property<bool>("IsShared")
                        .HasColumnType("boolean")
                        .HasColumnName("is_shared");

                    b.Property<int?>("OriginalPostId")
                        .HasColumnType("integer")
                        .HasColumnName("original_post_id");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_stories");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_stories_author_id");

                    b.HasIndex("OriginalPostId")
                        .HasDatabaseName("ix_stories_original_post_id");

                    b.HasIndex("Tags")
                        .HasDatabaseName("ix_stories_tags");

                    b.ToTable("stories", (string)null);
                });

            modelBuilder.Entity("StoriesService.Entities.Story", b =>
                {
                    b.HasOne("StoriesService.Entities.Story", "OriginalPost")
                        .WithMany()
                        .HasForeignKey("OriginalPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_stories_stories_original_post_id");

                    b.Navigation("OriginalPost");
                });
#pragma warning restore 612, 618
        }
    }
}
